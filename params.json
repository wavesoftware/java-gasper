{"name":"Gasper!","tagline":"Very simple integration testing JUnit harness for 'java -jar' servers like WildFly Swarm and Spring Boot","body":"# Gasper!\r\n\r\n[![Build Status](https://travis-ci.org/wavesoftware/java-gasper.svg?branch=develop)](https://travis-ci.org/wavesoftware/java-gasper) [![Coverage Status](https://coveralls.io/repos/github/wavesoftware/java-gasper/badge.svg?branch=develop)](https://coveralls.io/github/wavesoftware/java-gasper?branch=develop) [![Codacy Badge](https://api.codacy.com/project/badge/grade/5c4d1180812e438ebe872f9121ec4368)](https://www.codacy.com/app/krzysztof-suszynski/java-gasper) [![SonarQube Tech Debt](https://img.shields.io/sonar/http/sonar-ro.wavesoftware.pl/pl.wavesoftware:gasper/tech_debt.svg)](https://sonar.wavesoftware.pl/dashboard/index/2858) [![Maven Central](https://img.shields.io/maven-central/v/pl.wavesoftware/gasper.svg)](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22pl.wavesoftware%22%20AND%20a%3A%22gasper%22) [![Join the chat at https://gitter.im/wavesoftware/java-gasper](https://badges.gitter.im/wavesoftware/java-gasper.svg)](https://gitter.im/wavesoftware/java-gasper?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\r\n\r\nGasper is a very simple integration testing JUnit harness for `java -jar` servers like [WildFly Swarm](http://wildfly-swarm.io/) and [Spring Boot](http://projects.spring.io/spring-boot/).\r\n\r\n[![WildFly Swarm](https://avatars3.githubusercontent.com/u/11523816?v=3&s=100)](http://wildfly-swarm.io/) [![Spring Boot](https://avatars2.githubusercontent.com/u/317776?v=3&s=100)](http://projects.spring.io/spring-boot/)\r\n\r\nGasper provides a simple to use JUnit `TestRule` that can be used to build integration tests with simple apps, like REST micro-services. You can configure Gasper easily with a builder interface. Gasper will start the application before test class and stop it after tests completes.\r\n\r\nGasper supports currently only [Maven](https://maven.apache.org/). The `pom.xml` file is used to read project configuration achieving zero configuration operation.\r\n\r\n## Usage\r\n\r\n\r\nGasper utilize your packaged application. It It means it should be used in integration tests that run after application is being packaged by build tool (Maven). Add this code to your `pom.xml` file (if you didn't done that before):\r\n\r\n```xml\r\n<build>\r\n[..]\r\n<plugins>\r\n[..]\r\n  <plugin>\r\n    <groupId>org.apache.maven.plugins</groupId>\r\n    <artifactId>maven-failsafe-plugin</artifactId>\r\n    <version>2.19.1</version>\r\n    <executions>\r\n      <execution>\r\n        <goals>\r\n          <goal>integration-test</goal>\r\n          <goal>verify</goal>\r\n        </goals>\r\n      </execution>\r\n    </executions>\r\n  </plugin>\r\n[..]\r\n</plugins>\r\n[..]\r\n</build>\r\n```\r\n\r\n\r\nPlace your integration tests in classes that ends with `*IT` or `*ITest`.\r\n\r\n### WildFly Swarm configuration\r\n\r\n```java\r\n@ClassRule\r\npublic static Gasper gasper = Gasper.configurations()\r\n  .wildflySwarm()\r\n  .build();\r\n```\r\n\r\n### Spring Boot configuration\r\n\r\n```java\r\n@ClassRule\r\npublic static Gasper gasper = Gasper.configurations()\r\n  .springBoot()\r\n  .build();\r\n```\r\n\r\nBefore running `GasperBuilder.build()` method, you can reconfigure those default configurations to your needs.\r\n\r\n### Example test method (Unirest + JSONAssert)\r\n\r\nGasper is best to use with libraries like [Unirest](http://unirest.io/java.html) for fetching data and asserting HTTP/S statuses and [JSON Assert](https://github.com/marcingrzejszczak/jsonassert) to validate correctness of JSON output for REST services.\r\n\r\n```java\r\n@Test\r\npublic void testGetRoot() throws UnirestException {\r\n  // given\r\n  String address = gasper.getAddress(); // Address to deployed app, running live on random port\r\n  String expectedMessage = \"WildFly Swarm!\";\r\n\r\n  // when\r\n  HttpResponse<String> response = Unirest.get(address).asString();\r\n\r\n  // then\r\n  assertThat(response.getStatus()).isEqualTo(200);\r\n  assertThat(response.getBody()).field(\"hello\").isEqualTo(expectedMessage); // JSON Assert\r\n}\r\n```\r\n\r\n### Additional configuration\r\n\r\nTo configure Gasper use `GasperBuilder` interface, for ex.:\r\n\r\n```java\r\nprivate final int port = 11909;\r\nprivate final String webContext = \"/test\";\r\nprivate final String systemPropertyForPort = \"swarm.http.port\";\r\n\r\n@ClassRule\r\npublic static Gasper gasper = Gasper.configure()\r\n  .silentGasperMessages()\r\n  .usingSystemPropertyForPort(systemPropertyForPort)\r\n  .withSystemProperty(\"swarm.context.path\", webContext)\r\n  .withSystemProperty(systemPropertyForPort, String.valueOf(port))\r\n  .withJVMOptions(\"-server\", \"-Xms1G\", \"-Xmx1G\", \"-XX:+UseConcMarkSweepGC\")\r\n  .withMaxStartupTime(100)\r\n  .withMaxDeploymentTime(20)\r\n  .withEnvironmentVariable(\"jdbc.password\", \"S3CreT!1\")\r\n  .withTestApplicationLoggingOnConsole()\r\n  .usingPomFile(Paths.get(\"pom.xml\"))\r\n  .withArtifactPackaging(\"jar\")\r\n  .waitForWebContext(webContext)\r\n  .withArtifactClassifier(\"swarm\")\r\n  .usingWebContextChecker(GasperBuilderTest::checkContext)\r\n  .withPort(port)\r\n  .build();\r\n```\r\n\r\n## Installation\r\n\r\n### Maven\r\n\r\n```xml\r\n<dependency>\r\n    <groupId>pl.wavesoftware</groupId>\r\n    <artifactId>gasper</artifactId>\r\n    <version>1.0.0</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n```\r\n\r\n## Contributing\r\n\r\nContributions are welcome!\r\n\r\nTo contribute, follow the standard [git flow](http://danielkummer.github.io/git-flow-cheatsheet/) of:\r\n\r\n1. Fork it\r\n1. Create your feature branch (`git checkout -b feature/my-new-feature`)\r\n1. Commit your changes (`git commit -am 'Add some feature'`)\r\n1. Push to the branch (`git push origin feature/my-new-feature`)\r\n1. Create new Pull Request\r\n\r\nEven if you can't contribute code, if you have an idea for an improvement please open an [issue](https://github.com/wavesoftware/java-gasper/issues).\r\n\r\n## Requirements\r\n\r\n* Java 8\r\n* Maven 3\r\n\r\n## Releases\r\n\r\n* `1.0.0` - codename: *SkyMango*\r\n\t* First publicly available release\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}